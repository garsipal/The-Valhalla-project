
///////////////////////////////////////////////////////////////////////////////
//  Standard Function Library                                                //
///////////////////////////////////////////////////////////////////////////////

getmaster     = [ listfilter i $arg1 [isprivileged $i] ]
getadmin      = [ listfilter i $arg1 [isadmin      $i] ]
getauth       = [ listfilter i $arg1 [isauth       $i] ]
getspectator  = [ listfilter i $arg1 [isspectator  $i] ]
getignored    = [ listfilter i $arg1 [isignored    $i] ]
getbots       = [ listfilter i $arg1 [isai         $i] ]
getdead       = [ listfilter i $arg1 [isdead       $i] ]
getlagged     = [ listfilter i $arg1 [islagged     $i] ]

get!master    = [ listfilter i $arg1 [! (isprivileged $i)] ]
get!admin     = [ listfilter i $arg1 [! (isadmin      $i)] ]
get!auth      = [ listfilter i $arg1 [! (isauth       $i)] ]
get!spectator = [ listfilter i $arg1 [! (isspectator  $i)] ]
get!ignored   = [ listfilter i $arg1 [! (isignored    $i)] ]
get!bots      = [ listfilter i $arg1 [! (isai         $i)] ]
get!dead      = [ listfilter i $arg1 [! (isdead       $i)] ]
get!lagged    = [ listfilter i $arg1 [! (islagged     $i)] ]

getblue = [ listfilter i $arg1 [= (getclientteam $i) 1] ]
getred  = [ listfilter i $arg1 [= (getclientteam $i) 2] ]

clamp   = [ max  $arg2 (min  $arg3 $arg1) ]
clampf  = [ maxf $arg2 (minf $arg3 $arg1) ]

clamp=  = [ set $arg1 (max  $arg2 (min  $arg3 $$arg1)) ]
clampf= = [ set $arg1 (maxf $arg2 (minf $arg3 $$arg1)) ]

clamp-- = [ set $arg1 (max (- $$arg1 1) $arg2) ]
clamp++ = [ set $arg1 (min (+ $$arg1 1) $arg2) ]

// Truncate excess decimal points of given number
//   usage: /precf 13.45678 <STRLEN>
precf = [
	arg3 = (strstr $arg1 ".")
	if (> $arg3 -1) [
		substr $arg1 0 (+ $arg3 $arg2 1)
	] [ result $arg1 ]
]

// Add string padding ( ) to to the front of a given string
// until it reaches desired amount of characters in total
//   usage: /pad0 "13.45" <STRLEN> <CUSTOM CHAR FILL>
pad0 = [
	if (< $numargs 3) [ arg3 = " " ]
	loop n (- $arg2 (strlen $arg1)) [
		arg1 = (+s $arg3 $arg1)
	] ; result $arg1
]

// Add string padding (0) ONLY to the decimal end of a given number
// until it reaches desired amount of characters in total
//   usage: /pad0f "13.45" <STRLEN> <CUSTOM CHAR FILL>
pad0f = [
	if (< $numargs 3) [ arg3 = "0" ]
	loop n (- $arg2 (- (strlen $arg1) (strstr $arg1 ".") 1)) [
		arg1 = (+s $arg1 $arg3)
	] ; result $arg1
]

gcd = [ if (= $arg2 0) [ result $arg1 ] [ gcd $arg2 (modf $arg1 $arg2) ] ]
lcm = [ / (* $arg1 $arg2) (gcd $arg1 $arg2) ]

// percentage helper operators
%  = [ round (*f (/f $arg1 $arg2) 100) ]
%f = [ if $arg3 [ *f (/f $arg1 $arg2) $arg3 ] [ /f $arg1 $arg2 ] ]

// increment/decrement 1 from given var
--  = [ set $arg1 (-f $$arg1 1) ]
++  = [ set $arg1 (+f $$arg1 1) ]

// bitwise alias operators
^=  = [ set $arg1 (^  $$arg1 $arg2) ]
&=  = [ set $arg1 (&  $$arg1 $arg2) ]
|=  = [ set $arg1 (|  $$arg1 $arg2) ]
~=  = [ set $arg1 (~  $$arg1 $arg2) ]

^~= = [ set $arg1 (^~ $$arg1 $arg2) ]
&~= = [ set $arg1 (&~ $$arg1 $arg2) ]
|~= = [ set $arg1 (|~ $$arg1 $arg2) ]

<<= = [ set $arg1 (<< $$arg1 $arg2) ]
>>= = [ set $arg1 (>> $$arg1 $arg2) ]

// integer alias operators
-=  = [ set $arg1 (-  $$arg1 $arg2) ]
+=  = [ set $arg1 (+  $$arg1 $arg2) ]
/=  = [ set $arg1 (/  $$arg1 $arg2) ]
*=  = [ set $arg1 (*  $$arg1 $arg2) ]

// float alias operators
-f= = [ set $arg1 (-f $$arg1 $arg2) ]
+f= = [ set $arg1 (+f $$arg1 $arg2) ]
/f= = [ set $arg1 (/f $$arg1 $arg2) ]
*f= = [ set $arg1 (*f $$arg1 $arg2) ]

// string alias operators
+s= = [ set $arg1 (+s $$arg1 $arg2) ]

// Loops through a given string's characters
// usage: /loopchar  VAR  "string"  [action]
loopchar = [
	loop $arg1 (strlen $arg2) [
		$arg1 = (substr $arg2 $$arg1 1)
		doargs $arg3
	]
]

// Same as looplist, except it loops backwards
looplistrev = [
    looprev $arg1 (listlen $arg2) [
        $arg1 = (at $arg2 $$arg1)
        doargs $arg3
    ]
]

// Same as looplistconcat, except it loops backwards
looplistconcatrev = [
    loopconcatrev $arg1 (listlen $arg2) [
        $arg1 = (at $arg2 $$arg1)
        doargs $arg3
    ]
]

// Shorthand functions that assign return value directly
strsplice=  = [ set $arg1 (strsplice  $$arg1 $arg2 $arg3 $arg4) ]
listsplice= = [ set $arg1 (listsplice $$arg1 $arg2 $arg3 $arg4) ]
listfilter= = [ set $arg1 (listfilter $arg2 $$arg1 $arg3) ]
listdel=    = [ do [
	set $arg1 (listdel $$arg1 @(
		loopconcat n (- $numargs 1) [
			escape $[arg@(+ $n 2)]
		]
	))
] ]
append=     = [ do [
    set $arg1 (concat $$arg1 @(
        loopconcat n (- $numargs 1) [
            escape $[arg@(+ $n 2)]
        ]
    ))
] ]
appendword= = [ do [
    set $arg1 (concatword $$arg1 @(
        loopconcat n (- $numargs 1) [
            escape $[arg@(+ $n 2)]
        ]
    ))
] ]

// Subdivide a given list into smaller lists
// usage: /subdivlist  [list items here]  ITEMS-PER-DIV
subdivlist = [
	loopconcat* n $arg2 (ceil (/f (listlen $arg1) $arg2)) [
		escape (sublist $arg1 $n $arg2)
	]
]

// Shuffle the contents of a given list
// usage: /listshuffle [list items here]
listshuffle = [
	while [
		arg2 = (listlen $arg1)
		> $arg2 0
	] [
		arg2 = (rnd $arg2)
		append arg3 (escape (at $arg1 $arg2))
		arg1 = (listsplice $arg1 "" $arg2 1)
	] ; result $arg3
]




///////////////////////////////////////////////////////////////////////////////
//  CoSinusoidal Transition Functions                                        //
///////////////////////////////////////////////////////////////////////////////

// arg1 : TIME INDEX  | The current point in time, modulated by the WAVELENGTH
// arg2 : WAVELENGTH  | Measured in millis, controls the length of a full cycle
// arg3 : Y FORMAT    | Adjusts the Y output to different formats as below:
//    1 = Goes from 1 to -1 to 1 in a full cycle
//    0 = Goes from 1 to  0 to 1 in a full cycle (default)
cosWave = [
	if $arg2 [
		local y ; y = (cos (modf (*f 180 (/f $arg1 $arg2)) 360))
		if $arg3 [ result $y ] [ +f 0.5 (*f 0.5 $y) ]
	] [ result 1 ]
]

sinWave = [
	if $arg2 [
		local y ; y = (sin (modf (*f 180 (/f $arg1 $arg2)) 360))
		if $arg3 [ result $y ] [ +f 0.5 (*f 0.5 $y) ]
	] [ result 0 ]
]

// cosBounce/sinBounce  VALUE  X-OFFSET  WAVELENGTH
// multiplies VALUE through the [-1] return value of a cos/sin wave function
// useful for making bouncing elements inside of UIs particularly
cosBounce = [ *f $arg1 (cosWave (abs (+ $getmillis $arg2)) $arg3 1) ]
sinBounce = [ *f $arg1 (sinWave (abs (+ $getmillis $arg2)) $arg3 1) ]

// cosWave:INT  INT1  INT2  WAVELENGTH  X-TIME  Y-FORMAT
// if X = 0 will result in game runtime millis use
cosWave:INT = [
	if $arg4 [] [ arg4 = $getmillis ]
	arg4 = (cosWave (abs $arg4) $arg3 $arg5)
	local r1 g1 b1 r2 g2 b2
	INT>RGB $arg1 [ r1 = $r ; g1 = $g ; b1 = $b ]
	INT>RGB $arg2 [ r2 = $r ; g2 = $g ; b2 = $b ]
	RGB>INT (
		round (+f $r2 (*f (- $r2 $r1) -1 $arg4)) ) (
		round (+f $g2 (*f (- $g2 $g1) -1 $arg4)) ) (
		round (+f $b2 (*f (- $b2 $b1) -1 $arg4))
	)
]

// sinWave:INT  INT1  INT2  WAVELENGTH  X-TIME  Y-FORMAT
// if X = 0 will result in game runtime millis use
sinWave:INT = [
	if $arg4 [] [ arg4 = $getmillis ]
	arg4 = (sinWave (abs $arg4) $arg3 $arg5)
	local r1 g1 b1 r2 g2 b2
	INT>RGB $arg1 [ r1 = $r ; g1 = $g ; b1 = $b ]
	INT>RGB $arg2 [ r2 = $r ; g2 = $g ; b2 = $b ]
	RGB>INT (
		round (+f $r2 (*f (- $r2 $r1) -1 $arg4)) ) (
		round (+f $g2 (*f (- $g2 $g1) -1 $arg4)) ) (
		round (+f $b2 (*f (- $b2 $b1) -1 $arg4))
	)
]

// cosWave:RGB  R1 G1 B1  R2 G2 B2  WAVELENGTH  X-TIME  Y-FORMAT
// if X = 0 will result in game runtime millis use
cosWave:RGB = [
	if $arg8 [] [ arg8 = $getmillis ]
	arg8 = (cosWave (abs $arg8) $arg7 $arg9)
	RGB>INT (
		round (+f $arg4 (*f (- $arg4 $arg1) -1 $arg8)) ) (
		round (+f $arg5 (*f (- $arg5 $arg2) -1 $arg8)) ) (
		round (+f $arg6 (*f (- $arg6 $arg3) -1 $arg8))
	)
]

// sinWave:RGB  R1 G1 B1  R2 G2 B2  WAVELENGTH  X-TIME  Y-FORMAT
// if X = 0 will result in game runtime millis use
sinWave:RGB = [
	if $arg8 [] [ arg8 = $getmillis ]
	arg8 = (sinWave (abs $arg8) $arg7 $arg9)
	RGB>INT (
		round (+f $arg4 (*f (- $arg4 $arg1) -1 $arg8)) ) (
		round (+f $arg5 (*f (- $arg5 $arg2) -1 $arg8)) ) (
		round (+f $arg6 (*f (- $arg6 $arg3) -1 $arg8))
	)
]




///////////////////////////////////////////////////////////////////////////////
//  Gamemode Shortcuts & EoU Functions                                       //
///////////////////////////////////////////////////////////////////////////////

demo = [ stopdemo ; if (mode -1) [ map $arg1 ] ]
complete demo .           dmo

tutorial = [ mode -2 ; map tutorial ]

do [
	local n ; n = 0
	looplist m $modelist [
		$m = [ if (mode @n) [ map $arg1 ] ]
		complete $m "data/map" ogz
		n = (+ $n 1)
	]
]
coop = [ if (mode 0) [ map $arg1 ] ]
edit = [ if (mode 0) [ map $arg1 ] ]

complete map  "data/map" ogz // global handle
complete coop "data/map" ogz // legacy handle
complete edit "data/map" ogz // legacy handle

copymapcfg = [
	if (&& $numargs [! $mainmenu]) [
		.cmc_from $arg1
		.cmc_to   (? (> $numargs 1) $arg2 $mapname)
		if (findfile (+s "data/map/" $.cmc_from ".cfg")) [
			if (findfile (+s "data/map/" $.cmc_to ".cfg")) [ showui "dialog_copycfg" ] [
				textfocus "#copymapcfg"
				textload (+s "data/map/" $.cmc_from ".cfg")
				textsave (+s "data/map/" $.cmc_to   ".cfg")
			]
		] [
			error (format "%1 ^f3: no such map config!" $.cmc_from)
			.cmc_from "" ; .cmc_to ""
		]
	]
]

chatsay  = [ inputcommand "" [ say $commandbuf ] "[chat]"  s ]
chatexec = [ inputcommand "" [ commandbuf ] "[^f4exec^f7]" s ]
chatteam = [
	if (|| $isspectator [= $getteam 0]) [ chatsay ] [
		if (- $getteam 1) [
			inputcommand "" [sayteam $commandbuf] "[^f3team^f7]" s
		] [ inputcommand "" [sayteam $commandbuf] "[^f1team^f7]" s ]
	]
]

showscoreboard = [
	sleep $arg1 [
		if (|| [uivisible "main"] $isspectator) [] [
			showui "scoreboard"
		]
	]
]

togglemainmenu = [ || hidetopui [ toggleui "main" ] ]

togglefullcon = [
	fullconsize (? (iskeyheld "LCTRL") 80 40)
	togglefullconsole
]

togglefullscreen = [
	fullscreen (! $fullscreen)
	if $fullscreen [
		screenw $desktopw
		screenh $desktoph
		gscale $.gscalef
	] [
		screenw $.screenw
		screenh $.screenh
		gscale $.gscalew
	]
]

nextspecmode = [
	if $specmode [
		specmode (mod (+ $specmode 1) 3)
	] [
		specmode (+ (> $getfollow -1) 1)
	]
]

dozoom = [
	if $zoomtoggle [
		zoom (* $zoom -1)
	] [
		zoom 1
		onrelease [ zoom -1 ]
	]
]

// Quickly (un)spec yourself, or someone else given a CN
spec = [
	if $arg1 [] [ arg1 = $getclientnum ]
	spectator (! (isspectator $arg1)) $arg1
]

// Handy shorthand for manually changing server mastermode
mm = [ if $numargs [ mastermode $arg1 ] ]

// Handy shorthand to reload the current map
rm = [ map $mapname ]




///////////////////////////////////////////////////////////////////////////////
//  Player Follow Function                                                   //
///////////////////////////////////////////////////////////////////////////////

followplayer = [
	.followlist (get!spectator $listclients)
	if (&& $editing [listlen $.followlist]) [
		if (< (indexof $.followlist $.followcn) 0) [ .followcn (at $.followlist 0) ]
		if (= $.crosshairsize 0) [
			.crosshairsize $crosshairsize
			crosshairsize 0
			.followplayer 1
		]
		sleep 1 [ goto $.followcn ; followplayer ]
	] [
		crosshairsize $.crosshairsize
		.crosshairsize 0
		.followplayer 0
	]
]

follownext = [
	arg3 = (listlen $.followlist)
	if (&& $.followplayer $arg3) [
		.followcn (+ $arg3 (indexof $.followlist $.followcn) (? (>= $arg1 0) 1 -1))
		.followcn (at $.followlist (mod $.followcn $arg3))
	] arg2
]




///////////////////////////////////////////////////////////////////////////////
//  Misc Useful Functions                                                    //
///////////////////////////////////////////////////////////////////////////////

// Accepts a list of conditions, true statements, and false statements,
// and works through them one at a time, performing an action depending
// on the result of the condition, breaking the loop if one's false.
// Performs additional action at the end depending on loop results.
// usage: /cmd [ [cond1] [true1] [false1] .. ]  [ on-success ]  [ on-fail ]
cmd = [
	arg4 = 0
	looplist3 condition true false $arg1 [
		if (&& [> $arg4 -1] $condition) [
			arg4 = (+ $arg4 1) ; doargs $true
		] [ arg4 = -1 ; doargs $false ]
	]
	if (= (/ (listlen $arg1) 3) $arg4) [ doargs $arg2 ] [ doargs $arg3 ]
]

// Calculate position of cursor in game frame in pixels
getpxposx = [ ceil (*f $uicursorx (- $screenw 1)) ]
getpxposy = [ ceil (*f $uicursory (- $screenh 1)) ]




///////////////////////////////////////////////////////////////////////////////
//  Crosshair Definitions -- WIP                                             //
///////////////////////////////////////////////////////////////////////////////

loadcrosshair "data/interface/crosshair/ally.png" 0 // ally
loadcrosshair "data/interface/crosshair/default.png"  1 // normal
loadcrosshair "data/interface/crosshair/default_hit.png" 2 // hit
loadcrosshair "data/interface/crosshair/d.png" // edit




///////////////////////////////////////////////////////////////////////////////
//  Hook Definitions                                                         //
///////////////////////////////////////////////////////////////////////////////

on_kill = [
    showui .killUI
]

on_teamkill = [
    showui .killUI
]

on_death = [
	if (&& $uiDeathScores $getmode) [
		showscoreboard 950
	]
	showui .killUI
]

on_suicide = [
    showui .killUI
]

on_spawn = [
    hideui .TutorialTip
    hideui .killUI
]

on_connect = [
	music "" 5000
	hideui .TutorialTip
	hideui .killUI
]

on_disconnect = [
    hideui .TutorialTip
    hideui .killUI
]

on_forcedisconnect = [
    showui "serverdisconnect"
    hideui .killUI
    hideui .TutorialTip
]

on_mapstart = [
	.scoreboard.update
	if $mapmusic [
		music $mapmusic
	] [
	    music "" 5000
    ]
	set uiKillNum 0
	set fragQueue ""
	hideui .TutorialTip
	hideui .killUI
]

on_setmaster = [
	.scoreboard.update
]

on_intermission = [
	showscoreboard 700
	music "intermission" 1500 "music"
	hideui .killUI
]

on_edittoggle = [
	if $editing [
		if $hidehud [] [
			showui "edithud"
			if (uivisible "fullconsole") [] [ showui "editvars" ]
		]
	] [
		hideui "edithud"
		hideui "editvars"
		hideui "material"
		hideui "texture_browser"
		hideui "mapmodel_browser"
		hideui "geo_prefab"
	]
]

// XXX
on_mainmenutoggle = [
	if $mainmenu [
		music "menu.ogg" 5000
		hideui .killUI
	] [

	]
]

on_killfeed = [
	local actor target
	actor  = $getkillfeedactor
	target = $getkillfeedtarget
	// add new message to queue, FILO approach
	listsplice= fragQueue (format "%1 [%3] %2" $uiKillNum $getmillis (
		concat (escape (getclientname $actor)) (escape (getclientname $target)) (
			concat $getkillfeedweap $getkillfeedcrit $actor $target
		) (getclientcolor $actor) (getclientcolor $target)// (getclientteam $actor) (getclientteam $target)
	)) 0 0
	// trip flag of "last" entry to mark it for fade
	if (> (listlen $fragQueue) $uiKillCount) [
		listsplice= fragQueue (
			- $getmillis (- $uiKillDecay $uiKillFade)
		) (+ $uiKillCount 2) 1
	]
	// remove the newest entry after a set time
	sleep $uiKillDecay [
		listsplice= fragQueue "" (indexof $fragQueue @uiKillNum) 3
	]
	++ uiKillNum
]

on_clearsleep = []




///////////////////////////////////////////////////////////////////////////////
//  Startup Sanitization & Routines                                          //
///////////////////////////////////////////////////////////////////////////////

if $.followplayer [
	set  crosshairsize $.crosshairsize
	set .crosshairsize 0
	set .followplayer  0
]
